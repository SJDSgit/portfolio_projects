-- Case Study Questions

-- Data Transformation

-- Tables

SELECT * FROM PIZZA_RUNNER.CUSTOMER_ORDERS; -- refer view
SELECT * FROM PIZZA_RUNNER.PIZZA_NAMES;
SELECT * FROM PIZZA_RUNNER.PIZZA_RECIPES; -- refer view
SELECT * FROM PIZZA_RUNNER.PIZZA_TOPPINGS;
SELECT * FROM PIZZA_RUNNER.RUNNER_ORDERS; -- refer view
SELECT * FROM PIZZA_RUNNER.RUNNERS;

-- Views

SELECT * FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED;
SELECT * FROM PIZZA_RUNNER.RUNNER_ORDERS_CLEANED;
SELECT * FROM PIZZA_RUNNER.PIZZA_RECIPES_UNNEST;

-- Composing queries to create views

SELECT ORDER_ID,
	CUSTOMER_ID,
	PIZZA_ID,
	CASE WHEN EXCLUSIONS LIKE 'null' OR EXCLUSIONS like '' THEN NULL ELSE EXCLUSIONS END EXCLUSIONS,
	CASE WHEN EXTRAS LIKE '' OR EXTRAS like 'null' THEN NULL ELSE EXTRAS END EXTRAS,
	ORDER_TIME
FROM PIZZA_RUNNER.CUSTOMER_ORDERS;

SELECT ORDER_ID,
	RUNNER_ID,
	CASE WHEN PICKUP_TIME like 'null' THEN NULL ELSE PICKUP_TIME::timestamp	END PICKUP_TIME,
	CAST(CASE WHEN DISTANCE like '%km' THEN RTRIM(DISTANCE,'km') 
		 	WHEN DISTANCE like 'null' THEN NULL	ELSE DISTANCE END AS float) DISTANCE,
	CAST(CASE WHEN DURATION like '%minute' THEN RTRIM(DURATION,'minute')
			WHEN DURATION like '%minutes' THEN RTRIM(DURATION,'minutes')
			WHEN DURATION like '%mins' THEN RTRIM(DURATION,'mins')
			WHEN DURATION like 'null' THEN NULL	ELSE DURATION END AS int) DURATION,
	CASE	WHEN CANCELLATION like 'null' OR CANCELLATION IS NULL OR CANCELLATION like '' 
				THEN NULL ELSE CANCELLATION END CANCELLATION
FROM PIZZA_RUNNER.RUNNER_ORDERS;

-- Creating views

-- 1. PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED

CREATE OR REPLACE VIEW PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED(ORDER_ID,CUSTOMER_ID,PIZZA_ID,EXCLUSIONS,EXTRAS,ORDER_TIME) AS
	(SELECT ORDER_ID,
	 	CUSTOMER_ID,
	 	PIZZA_ID,
	 	CASE WHEN EXCLUSIONS LIKE 'null' OR EXCLUSIONS like '' THEN NULL ELSE EXCLUSIONS END EXCLUSIONS,
		CASE WHEN EXTRAS LIKE '' OR EXTRAS like 'null' THEN NULL ELSE EXTRAS END EXTRAS,
		ORDER_TIME
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS);

-- 2. PIZZA_RUNNER.RUNNER_ORDERS_cleaned

CREATE OR REPLACE VIEW PIZZA_RUNNER.RUNNER_ORDERS_CLEANED(ORDER_ID,RUNNER_ID,PICKUP_TIME,DISTANCE,DURATION,CANCELLATION) AS
	(SELECT ORDER_ID,
			RUNNER_ID,
			CASE WHEN PICKUP_TIME like 'null' THEN NULL ELSE PICKUP_TIME::timestamp END PICKUP_TIME,
			CAST(CASE WHEN DISTANCE like '%km' THEN RTRIM(DISTANCE,'km') 
				 	WHEN DISTANCE like 'null' THEN NULL ELSE DISTANCE END AS float) DISTANCE,
			CAST(CASE WHEN DURATION like '%minute' THEN RTRIM(DURATION,'minute') 
					 WHEN DURATION like '%minutes' THEN RTRIM(DURATION,'minutes') 
					 WHEN DURATION like '%mins' THEN RTRIM(DURATION,'mins') 
					 WHEN DURATION like 'null' THEN NULL ELSE DURATION END AS int) DURATION,
			CASE WHEN CANCELLATION like 'null' OR CANCELLATION IS NULL OR CANCELLATION like '' THEN NULL ELSE CANCELLATION END CANCELLATION
	FROM PIZZA_RUNNER.RUNNER_ORDERS);

-- 3. PIZZA_RUNNER.PIZZA_RECIPES_UNNEST

CREATE OR REPLACE VIEW PIZZA_RUNNER.PIZZA_RECIPES_UNNEST (PIZZA_ID,TOPPINGS,TOPPING_UNNEST) AS
	(SELECT PIZZA_ID,TOPPINGS,X.TOPPING_UNNEST::INT FROM(SELECT PIZZA_ID,TOPPINGS, UNNEST(STRING_TO_ARRAY(TOPPINGS,',')) TOPPING_UNNEST
	FROM PIZZA_RUNNER.PIZZA_RECIPES) X);

-- A. Pizza Metrics

-- How many pizzas were ordered?
SELECT COUNT(ORDER_ID) "NO OF PIZZA ORDERS"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED;

-- How many unique customer orders were made?
SELECT COUNT(DISTINCT ORDER_ID) "UNIQUE CUSTOMER ORDER"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED;

-- How many successful orders were delivered by each runner?
SELECT RUNNER_ID "RUNNER ID", COUNT(DISTINCT ORDER_ID) "SUCCESSFUL ORDER DELIVERIES"
FROM PIZZA_RUNNER.RUNNER_ORDERS_CLEANED
WHERE CANCELLATION IS NULL
GROUP BY RUNNER_ID;

-- How many of each type of pizza was delivered?
SELECT COC.PIZZA_ID "PIZZA", COUNT(COC.PIZZA_ID) "NO OF EACH TYPE OF PIZZA DELIVERED"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
LEFT JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC 
	ON COC.ORDER_ID = ROC.ORDER_ID
WHERE ROC.CANCELLATION IS NULL
GROUP BY COC.PIZZA_ID;

-- How many Vegetarian and Meatlovers were ordered by each customer?
SELECT COC.CUSTOMER_ID "CUSTOMER ID", PN.PIZZA_NAME "PIZZA", COUNT(COC.ORDER_ID) "ORDER COUNT"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
LEFT JOIN PIZZA_RUNNER.PIZZA_NAMES PN 
	ON COC.PIZZA_ID = PN.PIZZA_ID
GROUP BY COC.CUSTOMER_ID, PN.PIZZA_NAME
ORDER BY COC.CUSTOMER_ID, PN.PIZZA_NAME;

-- What was the maximum number of pizzas delivered in a single order?
SELECT COC.ORDER_ID "ORDER ID", COUNT(PIZZA_ID) "MAX PIZZA DELIVERIES IN SINGLE ORDER"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
LEFT JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC 
	ON COC.ORDER_ID = ROC.ORDER_ID
WHERE ROC.CANCELLATION IS NULL
GROUP BY COC.ORDER_ID
ORDER BY COUNT(PIZZA_ID) DESC
LIMIT 1;

-- For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT COC.CUSTOMER_ID "CUSTOMER ID", 
	SUM(CASE WHEN COC.EXCLUSIONS IS NOT NULL OR COC.EXTRAS IS NOT NULL THEN 1 ELSE 0 END) "ATLEAST 1 CHANGE",
	SUM(CASE WHEN COC.EXCLUSIONS IS NULL AND COC.EXTRAS IS NULL THEN 1 ELSE 0 END) "NO CHANGES"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
LEFT JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC 
	ON COC.ORDER_ID = ROC.ORDER_ID
WHERE ROC.CANCELLATION IS NULL
GROUP BY COC.CUSTOMER_ID
ORDER BY COC.CUSTOMER_ID;

-- How many pizzas were delivered that had both exclusions and extras?
SELECT SUM(CASE WHEN COC.EXCLUSIONS IS NOT NULL AND COC.EXTRAS IS NOT NULL THEN 1 ELSE 0 END) "EXCLUSIONS AND EXTRAS"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
LEFT JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC 
	ON COC.ORDER_ID = ROC.ORDER_ID
WHERE ROC.CANCELLATION IS NULL;

-- What was the total volume of pizzas ordered for each hour of the day?
SELECT EXTRACT(HOUR FROM ORDER_TIME) "HOUR", COUNT(ORDER_ID) "ORDER COUNT"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED
GROUP BY EXTRACT(HOUR FROM ORDER_TIME)
ORDER BY EXTRACT(HOUR FROM ORDER_TIME);

-- What was the volume of orders for each day of the week?
SELECT TO_CHAR(ORDER_TIME,'DY') "DAY OF THE WEEK", COUNT(ORDER_ID) "ORDER COUNT"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED
GROUP BY TO_CHAR(ORDER_TIME,'DY'),EXTRACT(DOW FROM ORDER_TIME)
ORDER BY EXTRACT(DOW FROM ORDER_TIME); 

-- B. Runner and Customer Experience

-- How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT DATE_PART('WEEK',REGISTRATION_DATE) "WEEK",COUNT(RUNNER_ID) "REGISTRATION"
FROM PIZZA_RUNNER.RUNNERS
GROUP BY DATE_PART('WEEK',REGISTRATION_DATE);

-- What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT ROC.RUNNER_ID,AVG(ROC.PICKUP_TIME-COC.ORDER_TIME )
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
LEFT JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
	ON COC.ORDER_ID=ROC.ORDER_ID
GROUP BY ROC.RUNNER_ID
ORDER BY ROC.RUNNER_ID;

-- Is there any relationship between the number of pizzas and how long the order takes to prepare?
SELECT X."PIZZA COUNT", AVG(X."PREP TIME") "AVG PREP TIME"
FROM
	(SELECT COC.ORDER_ID "ORDER ID",COUNT(COC.PIZZA_ID) "PIZZA COUNT",ROC.PICKUP_TIME-COC.ORDER_TIME "PREP TIME"
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
	JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
		ON COC.ORDER_ID=ROC.ORDER_ID
	WHERE CANCELLATION is null
	GROUP BY COC.ORDER_ID,ROC.PICKUP_TIME,COC.ORDER_TIME) X
GROUP BY X."PIZZA COUNT";

-- What was the average distance travelled for each customer?
SELECT COC.CUSTOMER_ID "CUSTOMER ID",ROUND(AVG(ROC.DISTANCE)::NUMERIC,2) "AVG DISTANCE (KM)"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
	ON COC.ORDER_ID=ROC.ORDER_ID
WHERE CANCELLATION is null
GROUP BY COC.CUSTOMER_ID;

-- What was the difference between the longest and shortest delivery times for all orders?
SELECT MAX(DURATION) "LONGEST DELIVERY TIME",MIN(DURATION) "SHORTEST DELIVERY TIME",MAX(DURATION)-MIN(DURATION) "DIFF"
FROM PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
WHERE CANCELLATION is null;
	
-- What was the average speed for each runner for each delivery and do you notice any trend for these values?
SELECT RUNNER_ID "RUNNER ID",ORDER_ID "ORDER ID",ROUND((AVG(DISTANCE/DURATION *60))::NUMERIC,2) "SPEED KM/HR"
FROM PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
WHERE CANCELLATION is null
GROUP BY RUNNER_ID,ORDER_ID;

-- What is the successful delivery percentage for each runner?
SELECT RUNNER_ID "RUNNER ID",COUNT(DURATION)"SUCCESSFUL DELIVERIES",
		COUNT(*) "TOTAL DELIVERIES",(COUNT(DURATION)/COUNT(*)::FLOAT)*100 "SUCCESSFUL DELIVERY PERCENTAGE (%)"
FROM PIZZA_RUNNER.RUNNER_ORDERS_CLEANED
GROUP BY RUNNER_ID
ORDER BY RUNNER_ID;

-- C. Ingredient Optimisation

-- What are the standard ingredients for each pizza?
SELECT PN.PIZZA_NAME "PIZZA NAME",STRING_AGG(PT.TOPPING_NAME,', ') "STANDARD INGREDIENTS"
FROM PIZZA_RUNNER.PIZZA_RECIPES_UNNEST PRU
JOIN PIZZA_RUNNER.PIZZA_NAMES  PN
	ON PRU.PIZZA_ID=PN.PIZZA_ID
JOIN PIZZA_RUNNER.PIZZA_TOPPINGS PT
	ON PT.TOPPING_ID=PRU.TOPPING_UNNEST
GROUP BY PN.PIZZA_NAME;

-- What was the most commonly added extra?
SELECT X.EXTRAS_UNNEST "TOPPING ID",PT.TOPPING_NAME "TOPPING NAME",COUNT(X.EXTRAS_UNNEST) "COUNT" 
FROM 
	(SELECT *,UNNEST(STRING_TO_ARRAY(EXTRAS,','))::INT EXTRAS_UNNEST
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED) X
JOIN PIZZA_RUNNER.PIZZA_TOPPINGS PT
	ON X.EXTRAS_UNNEST=PT.TOPPING_ID
GROUP BY X.EXTRAS_UNNEST,PT.TOPPING_NAME
ORDER BY COUNT(X.EXTRAS_UNNEST) DESC
LIMIT 1;

-- What was the most common exclusion?
SELECT X.EXCLUSIONS_UNNEST "TOPPING ID",PT.TOPPING_NAME "TOPPING NAME",COUNT(X.EXCLUSIONS_UNNEST) "COUNT" 
FROM 
	(SELECT *,UNNEST(STRING_TO_ARRAY(EXCLUSIONS,','))::INT EXCLUSIONS_UNNEST
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED) X
JOIN PIZZA_RUNNER.PIZZA_TOPPINGS PT
	ON X.EXCLUSIONS_UNNEST=PT.TOPPING_ID
GROUP BY X.EXCLUSIONS_UNNEST,PT.TOPPING_NAME
ORDER BY COUNT(X.EXCLUSIONS_UNNEST) DESC
LIMIT 1;

-- Generate an order item for each record in the customers_orders table in the format of one of the following:
-- Meat Lovers
SELECT COC.ORDER_ID "ORDER ID",COC.ORDER_TIME "ORDER TIME",COC.CUSTOMER_ID "CUSTOMER ID",PN.PIZZA_NAME "PIZZA"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
JOIN PIZZA_RUNNER.PIZZA_NAMES PN
	ON PN.PIZZA_ID=COC.PIZZA_ID
WHERE COC.PIZZA_ID=1
ORDER BY COC.ORDER_TIME;

-- Meat Lovers - Exclude Beef
SELECT X.ORDER_ID "ORDER ID",X.ORDER_TIME "ORDER TIME",X.CUSTOMER_ID "CUSTOMER ID",PN.PIZZA_NAME "PIZZA"
FROM
		(SELECT *, UNNEST(STRING_TO_ARRAY(EXCLUSIONS,','))::INT EXCLUSIONS_UNNEST
		FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED
		WHERE PIZZA_ID=1) X
JOIN PIZZA_RUNNER.PIZZA_NAMES PN
	ON X.PIZZA_ID=PN.PIZZA_ID
JOIN PIZZA_RUNNER.PIZZA_TOPPINGS PT
	ON PT.TOPPING_ID=X.EXCLUSIONS_UNNEST
WHERE X.EXCLUSIONS_UNNEST=3;

-- Meat Lovers - Extra Bacon
SELECT X.ORDER_ID "ORDER ID",X.ORDER_TIME "ORDER TIME",X.CUSTOMER_ID "CUSTOMER ID",PN.PIZZA_NAME "PIZZA"
FROM
	(SELECT *, UNNEST(STRING_TO_ARRAY(EXTRAS,','))::INT EXTRAS_UNNEST
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED) X
JOIN PIZZA_RUNNER.PIZZA_NAMES PN
	ON X.PIZZA_ID=PN.PIZZA_ID
WHERE X.PIZZA_ID=1 AND X.EXTRAS_UNNEST=1;


-- Meat Lovers (1) - Exclude Cheese (4), Bacon (1) - Extra Mushroom (6), Peppers (9) 
SELECT X.ORDER_ID "ORDER ID",X.ORDER_TIME "ORDER TIME",X.CUSTOMER_ID "CUSTOMER ID",PN.PIZZA_NAME "PIZZA"
FROM
	(SELECT *, UNNEST(STRING_TO_ARRAY(EXCLUSIONS,','))::INT EXCLUSIONS_UNNEST,UNNEST(STRING_TO_ARRAY(EXTRAS,','))::INT EXTRAS_UNNEST
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED) X
JOIN PIZZA_RUNNER.PIZZA_NAMES PN
	ON X.PIZZA_ID=PN.PIZZA_ID
WHERE X.PIZZA_ID=1 AND X.EXCLUSIONS_UNNEST IN (4,1) OR X.EXCLUSIONS_UNNEST IN (6,9);

-- Generate an alphabetically ordered comma separated ingredient list for each pizza order from 
-- the customer_orders table and add a 2x in front of any relevant ingredients
-- For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"


-- What is the total quantity of each ingredient used in all delivered pizzas sorted by most 
-- frequent first?

-- D. Pricing and Ratings
 
-- If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes
-- how much money has Pizza Runner made so far if there are no delivery fees?
SELECT SUM(X.COST) "REVENUE (IN DOLLARS)" 
FROM
	(SELECT *,
	CASE WHEN PIZZA_ID=1 THEN 12
		WHEN PIZZA_ID=2 THEN 10 END COST
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
	JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
		ON COC.ORDER_ID=ROC.ORDER_ID
	WHERE CANCELLATION IS NULL) X;

-- What if there was an additional $1 charge for any pizza extras?
SELECT SUM(CASE WHEN X.PIZZA_COUNT>1 THEN COST+((X.PIZZA_COUNT-1)*1) ELSE COST END) "FINAL_REVENUE(IN DOLLAR)"
FROM
	(SELECT COC.ORDER_ID,COUNT(COC.PIZZA_ID) PIZZA_COUNT,	
	SUM(CASE WHEN COC.PIZZA_ID=1 THEN 12
		WHEN COC.PIZZA_ID=2 THEN 10 END) COST
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
	JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
		ON COC.ORDER_ID=ROC.ORDER_ID
	WHERE CANCELLATION IS NULL
	GROUP BY COC.ORDER_ID) X;

-- Add cheese is $1 extra

-- The Pizza Runner team now wants to add an additional ratings system that allows customers to 
-- rate their runner, how would you design an additional table for this new dataset - generate a 
-- schema for this new table and insert your own data for ratings for each successful customer 
-- order between 1 to 5.
CREATE TABLE IF NOT EXISTS PIZZA_RUNNER.RATINGS
(
ORDER_ID INT,
RATING INT
);

INSERT INTO PIZZA_RUNNER.RATINGS 
VALUES(1,3),
(2,5),
(3,4),
(4,3),
(5,2),
(7,1),
(8,5),
(10,4);

DELETE FROM PIZZA_RUNNER.RATINGS;
SELECT * FROM PIZZA_RUNNER.RATINGS;

-- Using your newly generated table - can you join all of the information together to form a table
-- which has the following information for successful deliveries?
-- customer_id-- order_id-- runner_id-- rating-- order_time-- pickup_time
-- Time between order and pickup-- Delivery duration-- Average speed-- Total number of pizzas
SELECT COC.CUSTOMER_ID "CUSTOMER ID",COC.ORDER_ID "ORDER ID",ROC.RUNNER_ID "RUNNER ID",
	R.RATING "RATING",COC.ORDER_TIME "ORDER TIME",ROC.PICKUP_TIME "PICKUP TIME",
	ROC.PICKUP_TIME-COC.ORDER_TIME "AVG DELIVERY TIME",ROC.DURATION "DURATION",
	ROC.CANCELLATION "CANCELLATION",ROUND((AVG(ROC.DISTANCE/ROC.DURATION *60))::NUMERIC,2) "AVG SPEED",
	COUNT(COC.PIZZA_ID) "PIZZA COUNT"
FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
FULL JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
	ON COC.ORDER_ID=ROC.ORDER_ID
FULL JOIN PIZZA_RUNNER.RATINGS R
	ON COC.ORDER_ID=R.ORDER_ID
 GROUP BY COC.CUSTOMER_ID,COC.ORDER_ID,ROC.RUNNER_ID,R.RATING,COC.ORDER_TIME,ROC.PICKUP_TIME,
 ROC.PICKUP_TIME-COC.ORDER_TIME,ROC.DURATION,ROC.CANCELLATION
ORDER BY COC.ORDER_ID,COC.ORDER_TIME;

-- If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each
-- runner is paid $0.30 per kilometre traveled - how much money does Pizza Runner have left over 
-- after these deliveries?
SELECT SUM(X.COST)-SUM(X.DISTANCE) "TOTAL REVENUE"
FROM
	(SELECT	COC.ORDER_ID,ROC.DISTANCE*.3 DISTANCE,SUM(CASE WHEN COC.PIZZA_ID=1 THEN 12
			WHEN COC.PIZZA_ID=2 THEN 10 END) COST
	FROM PIZZA_RUNNER.CUSTOMER_ORDERS_CLEANED COC
		JOIN PIZZA_RUNNER.RUNNER_ORDERS_CLEANED ROC
			ON COC.ORDER_ID=ROC.ORDER_ID
		WHERE CANCELLATION IS NULL
	GROUP BY COC.ORDER_ID,ROC.DISTANCE) X;

-- E. Bonus Questions

-- If Danny wants to expand his range of pizzas - how would this impact the existing data design?
-- Write an INSERT statement to demonstrate what would happen if a new Supreme pizza with all the
-- toppings was added to the Pizza Runner menu?